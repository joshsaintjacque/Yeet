<% module_namespacing do -%>
  class <%= controller_class_name %>Controller < ApplicationController
    before_action :set_<%= singular_table_name %>, only: %i[ show edit update destroy ]
  
    # GET <%= route_url %>
    def index
      render inertia: "<%= plural_table_name.classify %>/Index", props: {
        <%= plural_table_name %>: <%= plural_table_name %>.map { |note| <%= plural_table_name.classify %>Presenter.new(<%= singular_table_name %>: <%= singular_table_name %>) }
      }
    end
  
    # GET <%= route_url %>/1
    def show
      render inertia: "<%= plural_table_name.classify %>/Show", props: {
        <%= singular_table_name %>: <%= plural_table_name.classify %>Presenter.new(<%= singular_table_name %>: @<%= singular_table_name %>)
      }
    end
  
    # GET <%= route_url %>/new
    def new
      render inertia: "<%= plural_table_name.classify %>/New"
    end
  
    # GET <%= route_url %>/1/edit
    def edit
      render inertia: "<%= plural_table_name.classify %>/Edit", props: {
        note: <%= plural_table_name.classify %>Presenter.new(<%= singular_table_name %>: @<%= singular_table_name %>)
      }
    end
  
    # POST <%= route_url %>
    def create
      <%= plural_table_name %>.create <%= singular_table_name %>_params

      redirect_to <%= plural_table_name %>_path
    end
  
    # PATCH/PUT <%= route_url %>/1
    def update
      respond_to do |format|
        if @<%= orm_instance.update("#{singular_table_name}_params") %>
          format.json { render :show, status: :ok, location: @<%= singular_table_name %> }
        else
          format.json { render json: @<%= singular_table_name %>.errors, status: :unprocessable_entity }
        end
      end
    end
  
    # DELETE <%= route_url %>/1
    def destroy
      @<%= orm_instance.destroy %>
      respond_to do |format|
        format.json { head :no_content }
      end
    end
  
    private
      # Use callbacks to share common setup or constraints between actions.
      def set_<%= singular_table_name %>
        @<%= singular_table_name %> = <%= orm_class.find(class_name, "params[:id]") %>
      end
  
      # Only allow a list of trusted parameters through.
      def <%= "#{singular_table_name}_params" %>
        <%- if attributes_names.empty? -%>
        params.fetch(:<%= singular_table_name %>, {})
        <%- else -%>
        params.require(:<%= singular_table_name %>).permit(<%= permitted_params %>)
        <%- end -%>
      end
  end
  <% end -%>
  